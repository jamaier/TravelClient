    [HttpGet]
    public async Task<IActionResult> GetQuotes( int maxWords, string speaker, bool question = false, int page = 1, int pageSize = 10)
    {
      IQueryable<Quote> query = _db.Quotes.AsQueryable();

      if (speaker != null)
      {
        query = query.Where(entry => entry.Speaker == speaker);
      }
      if (question)
      {  
        query = query.Where(entry => entry.Text.EndsWith("?"));
      }
      if (maxWords != 0)
      {  
        query = query.Where(entry => entry.NumberOfWords <= maxWords);
      }
        // Calculate the number of items to skip based on the page size and requested page.
        int skip = (page - 1) * pageSize;

        // Retrieve the data from your data source, applying the pagination parameters.
        List<Quote> quotes = await query
            .Skip(skip)
            .Take(pageSize)
            .ToListAsync();

        // Determine the total number of items in your data source.
        int totalCount = _db.Quotes.Count();

        // Create a response object to hold the paginated data and total count.
        var response = new
        {
            Data = quotes,
            TotalCount = totalCount,
            Page = page,
            PageSize = pageSize
        };

        // Return the paginated data to the client.
        return Ok(response);
    }




  [AllowAnonymous]
  public async Task<IActionResult> Index(int page = 1, int pageSize = 10)
  {
    List<Quote> quoteList = new List<Quote> { };
    using (var httpClient = new HttpClient())
    {
      using (var response = await httpClient.GetAsync($"https://localhost:5001/api/Quotes?question=false&page={page}&pageSize={pageSize}"))
      {
        string apiResponse = await response.Content.ReadAsStringAsync();
        JObject jsonResponse = JObject.Parse(apiResponse);
        JArray quoteArray = (JArray)jsonResponse["data"];
        quoteList = quoteArray.ToObject<List<Quote>>();
      }
    }
    List<Quote> quoteList2 = new List<Quote> { };
    using (var httpClient = new HttpClient())
    {
      using (var response = await httpClient.GetAsync("https://localhost:5001/api/Quotes?question=false&page=1&pageSize=1001"))
      {
        string apiResponse = await response.Content.ReadAsStringAsync();
        JObject jsonResponse = JObject.Parse(apiResponse);
        JArray quoteArray = (JArray)jsonResponse["data"];
        quoteList2 = quoteArray.ToObject<List<Quote>>();
      }
    }
    ViewBag.LastId = quoteList2.Count();
    ViewBag.CurrentPage = page;
    ViewBag.PageSize = pageSize;
    return View(quoteList);
  }

                              public async Task<IActionResult> Index(int page = 1, int pageSize = 5)
                              {
                                List<Destination> destList = new List<Destination> { };
                                using (var httpClient = new HttpClient())
                                {
                                  using (var response = await httpClient.GetAsync($"https://localhost:5001/api/Destinations?page={page}&pagesize={pageSize}"))
                                  {
                                    var destContent = await response.Content.ReadAsStringAsync();
                                    JArray destArray = JArray.Parse(destContent);
                                    destList = destArray.ToObject<List<Destination>>();
                                  }
                                }
                                ViewBag.TotalPages = destList.Count();
                                //page number inside the url
                                ViewBag.CurrentPage = page;
                                //amnt of items on the page
                                ViewBag.PageSize = pageSize;
                                //the amount of destinations returned from our database
                                // ViewBag.Pages = pageCount;

                                return View(destList);
                              }


@{
ViewData["Title"] = "Destinations";
int pageSize = 6; // set the desired page size
int currentPage = ViewBag.CurrentPage;
int startIndex = (currentPage - 1) * pageSize;
int endIndex = Math.Min(startIndex + pageSize, Model.Count);
List<Destination> destinations = Model.GetRange(startIndex, endIndex - startIndex);
}

<h1>All Destinations</h1>
<h3>Actions:</h3>
<p>@Html.ActionLink("Add a new destination", "Create")</p>
<div class="row">
    @foreach (Destination destination in destinations)
    {
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="card-title">@destination.City</h5>
                    <p class="card-text">@destination.Country</p>
                    <a href="/Destinations/Details/@(destination.DestinationId)" class="btn btn-primary">Details</a>
                </div>
            </div>
        </div>
    }
</div>
<div class="row">
    <div class="col">
        <ul class="pagination">
            @if (currentPage > 1)
            {
                <a href="/Destinations?page=@(currentPage - 1)&pageSize=@pageSize"><button class="page-link">Prev</button></a>
            }
            @for (int i = 1; i <= Math.Ceiling((double)Model.Count / pageSize); i++)
            {
                <li class="page-item @(currentPage == i ? "active" : "")">
                    <a class="page-link" href="/Destinations?page=@i&pageSize=@pageSize">@i</a>
                </li>
            }
            @if (currentPage < Math.Ceiling((double)Model.Count / pageSize))
            {
                <a href="/Destinations?page=@(currentPage + 1)&pageSize=@pageSize"><button class="page-link">Next</button></a>
            }
        </ul>
    </div>
</div>




@{
    ViewData["Title"] = "Destinations";
}

@using TravelClient.Models;
<h1>All Destinations</h1>

<h3>Actions:</h3>
<p>@Html.ActionLink("Add a new destination", "Create")</p>

<div class="row">
    @foreach (Destination destination in Model)
    {
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="card-title">@destination.City</h5>
                    <p class="card-text">@destination.Country</p>
                    <a href="/Destinations/Details/@(destination.DestinationId)" class="btn btn-primary">Details</a>
                </div>
            </div>
        </div>
    }
</div>

<div class="row">
    <div class="col">
        <ul class="pagination">
            @if (ViewBag.CurrentPage > 1)
            {
                <a href="/Destinations?page=@(ViewBag.CurrentPage - 1)&pageSize=PageSize"><button class="page-link">Prev</button></a>
            }
            @for (int i = 1; i <= ViewBag.TotalPages; i++)
            {
                <li class="page-item @(ViewBag.CurrentPage == i ? "active" : "")">
                    <a class="page-link" href="/Destinations?page=@i&PageSize=PageSize">@i</a>
                </li>
            }
            @if (ViewBag.CurrentPage < ViewBag.TotalPages)
            {
                <a href="/Destinations?page=@(ViewBag.CurrentPage + 1)&pageSize="><button class="page-link">Next</button></a>
            }
        </ul>
    </div>
</div>

